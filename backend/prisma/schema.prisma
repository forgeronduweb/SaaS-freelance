// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Énumérations
enum UserRole {
  FREELANCE
  CLIENT
  ADMIN
}

enum MissionStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MissionUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  ORANGE_MONEY
  MTN_MONEY
  MOOV_MONEY
  WAVE
  BANK_CARD
  BANK_TRANSFER
}

enum PaymentType {
  DEPOSIT
  WITHDRAWAL
  ESCROW_DEPOSIT
  ESCROW_RELEASE
  COMMISSION
  REFUND
}

enum EscrowStatus {
  PENDING
  DEPOSITED
  RELEASED
  DISPUTED
  REFUNDED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

enum ConversationType {
  DIRECT
  GROUP
  SUPPORT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum NotificationType {
  NEW_MISSION
  MISSION_APPLICATION
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  MISSION_STARTED
  MISSION_COMPLETED
  MISSION_CANCELLED
  NEW_MESSAGE
  PAYMENT_RECEIVED
  PAYMENT_SENT
  PAYMENT_FAILED
  ESCROW_DEPOSITED
  ESCROW_RELEASED
  ESCROW_DISPUTED
  ACCOUNT_VERIFIED
  PASSWORD_RESET
  SECURITY_ALERT
  NEW_REVIEW
  PROMOTION
  ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Modèles MongoDB
model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  email                   String    @unique
  password                String
  fullName                String
  phone                   String?
  role                    UserRole  @default(FREELANCE)
  isEmailVerified         Boolean   @default(false)
  isPhoneVerified         Boolean   @default(false)
  isActive                Boolean   @default(true)

  // Champs spécifiques aux freelances
  title                   String?
  bio                     String?
  hourlyRate              Float?
  dailyRate               Float?
  skills                  String[]
  country                 String?
  city                    String?
  profilePhoto            String?
  rating                  Float     @default(0)
  totalReviews            Int       @default(0)
  completedProjects       Int       @default(0)

  // Champs spécifiques aux clients
  companyName             String?
  companySize             String?
  sector                  String?
  website                 String?
  companyLogo             String?
  totalBudgetSpent        Float     @default(0)
  totalProjectsPublished  Int       @default(0)

  // Métadonnées
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  emailVerificationToken  String?
  passwordResetToken      String?
  passwordResetExpires    DateTime?

  // Relations
  clientMissions          Mission[] @relation("ClientMissions")
  assignedMissions        Mission[] @relation("AssignedMissions")
  applications            Application[]
  clientPayments          Payment[] @relation("ClientPayments")
  freelancePayments       Payment[] @relation("FreelancePayments")
  clientEscrows           Escrow[]  @relation("ClientEscrows")
  freelanceEscrows        Escrow[]  @relation("FreelanceEscrows")
  sentMessages            Message[] @relation("MessageSender")
  conversations           ConversationParticipant[]
  createdConversations    Conversation[] @relation("ConversationCreator")
  notifications           Notification[] @relation("NotificationUser")
  sentNotifications       Notification[] @relation("NotificationSender")
  notificationPreferences NotificationPreference[]
  reviews                 Review[]
  receivedReviews         Review[]  @relation("ReviewTarget")

  @@map("users")
}

model Mission {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  requiredSkills        String[]
  budget                Float
  status                MissionStatus @default(DRAFT)
  urgency               MissionUrgency @default(NORMAL)
  deadline              DateTime
  category              String?
  isRemote              Boolean       @default(false)
  location              String?
  applicationsCount     Int           @default(0)
  viewsCount            Int           @default(0)

  // Relations
  client                User          @relation("ClientMissions", fields: [clientId], references: [id])
  clientId              String        @db.ObjectId
  assignedFreelance     User?         @relation("AssignedMissions", fields: [assignedFreelanceId], references: [id])
  assignedFreelanceId   String?       @db.ObjectId
  applications          Application[]
  escrows               Escrow[]
  payments              Payment[]
  reviews               Review[]

  // Dates importantes
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  startedAt             DateTime?
  completedAt           DateTime?
  cancelledAt           DateTime?

  // Métadonnées additionnelles
  clientNotes           String?
  freelanceNotes        String?
  isUrgent              Boolean       @default(false)
  isFeatured            Boolean       @default(false)
  attachments           String[]
  estimatedDuration     String?
  commissionRate        Float         @default(0)

  @@map("missions")
}

model Application {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  coverLetter       String
  proposedBudget    Float
  estimatedDelivery DateTime
  status            ApplicationStatus @default(PENDING)
  portfolio         String?
  attachments       String[]

  // Relations
  mission           Mission           @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId         String            @db.ObjectId
  freelance         User              @relation(fields: [freelanceId], references: [id])
  freelanceId       String            @db.ObjectId

  // Dates
  appliedAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  respondedAt       DateTime?

  // Métadonnées
  clientFeedback    String?
  isViewed          Boolean           @default(false)
  rejectionReason   String?
  additionalNotes   String?

  @@map("applications")
}

model Payment {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  amount                Float
  status                PaymentStatus @default(PENDING)
  method                PaymentMethod
  type                  PaymentType
  description           String?
  externalTransactionId String?
  phoneNumber           String?
  operatorReference     String?

  // Relations
  user                  User          @relation("ClientPayments", fields: [userId], references: [id])
  userId                String        @db.ObjectId
  mission               Mission?      @relation(fields: [missionId], references: [id])
  missionId             String?       @db.ObjectId
  freelanceUser         User?         @relation("FreelancePayments", fields: [freelanceUserId], references: [id])
  freelanceUserId       String?       @db.ObjectId

  // Métadonnées
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  processedAt           DateTime?
  failedAt              DateTime?
  errorMessage          String?
  commissionRate        Float         @default(0)
  commissionAmount      Float         @default(0)
  netAmount             Float

  // Informations de callback
  callbackUrl           String?
  providerResponse      Json?
  isCallbackReceived    Boolean       @default(false)

  // Relations escrow
  depositEscrows        Escrow[]      @relation("EscrowDepositPayment")
  releaseEscrows        Escrow[]      @relation("EscrowReleasePayment")

  @@map("payments")
}

model Escrow {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount                    Float
  status                    EscrowStatus @default(PENDING)
  description               String?

  // Relations
  client                    User        @relation("ClientEscrows", fields: [clientId], references: [id])
  clientId                  String      @db.ObjectId
  freelance                 User?       @relation("FreelanceEscrows", fields: [freelanceId], references: [id])
  freelanceId               String?     @db.ObjectId
  mission                   Mission     @relation(fields: [missionId], references: [id])
  missionId                 String      @unique @db.ObjectId
  depositPayment            Payment?    @relation("EscrowDepositPayment", fields: [depositPaymentId], references: [id])
  depositPaymentId          String?     @db.ObjectId
  releasePayment            Payment?    @relation("EscrowReleasePayment", fields: [releasePaymentId], references: [id])
  releasePaymentId          String?     @db.ObjectId

  // Dates importantes
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  depositedAt               DateTime?
  releasedAt                DateTime?
  disputedAt                DateTime?
  refundedAt                DateTime?

  // Métadonnées de dispute
  disputeReason             String?
  disputeResolution         String?
  disputeResolvedBy         String?
  disputeResolvedAt         DateTime?

  // Conditions de libération
  autoReleaseEnabled        Boolean     @default(false)
  autoReleaseDate           DateTime?
  releaseConditions         String?
  platformCommissionRate    Float       @default(10)
  platformCommissionAmount  Float       @default(0)
  freelanceAmount           Float

  @@map("escrows")
}

model Conversation {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  title           String?
  type            ConversationType          @default(DIRECT)
  isActive        Boolean                   @default(true)

  // Relations
  participants    ConversationParticipant[]
  createdBy       User                      @relation("ConversationCreator", fields: [createdById], references: [id])
  createdById     String                    @db.ObjectId
  messages        Message[]
  mission         Mission?                  @relation(fields: [missionId], references: [id])
  missionId       String?                   @db.ObjectId

  // Métadonnées
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  lastMessageAt   DateTime?
  lastMessageId   String?
  messagesCount   Int                       @default(0)

  // Paramètres de conversation
  isArchived      Boolean                   @default(false)
  isMuted         Boolean                   @default(false)
  settings        Json?
  unreadCounts    Json?

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  content          String
  type             MessageType   @default(TEXT)
  status           MessageStatus @default(SENT)

  // Relations
  conversation     Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String        @db.ObjectId
  sender           User          @relation("MessageSender", fields: [senderId], references: [id])
  senderId         String        @db.ObjectId
  replyTo          Message?      @relation("MessageReply", fields: [replyToId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replyToId        String?       @db.ObjectId
  replies          Message[]     @relation("MessageReply")

  // Pièces jointes
  attachments      String[]
  attachmentMetadata Json?

  // Métadonnées
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deliveredAt      DateTime?
  readAt           DateTime?
  deletedAt        DateTime?

  // Informations de lecture par participant
  readBy           Json?

  // Édition de message
  isEdited         Boolean       @default(false)
  editedAt         DateTime?
  originalContent  String?

  // Système/Bot messages
  isSystemMessage  Boolean       @default(false)
  systemData       Json?

  // Réactions
  reactions        Json?

  @@map("messages")
}

model Notification {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  message           String
  type              NotificationType
  priority          NotificationPriority @default(NORMAL)
  isRead            Boolean              @default(false)
  isArchived        Boolean              @default(false)

  // Relations
  user              User                 @relation("NotificationUser", fields: [userId], references: [id])
  userId            String               @db.ObjectId
  sender            User?                @relation("NotificationSender", fields: [senderId], references: [id])
  senderId          String?              @db.ObjectId

  // Métadonnées
  metadata          Json?

  // Dates
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  readAt            DateTime?
  archivedAt        DateTime?
  scheduledFor      DateTime?
  expiresAt         DateTime?

  // Canaux de notification
  sentInApp         Boolean              @default(true)
  sentEmail         Boolean              @default(false)
  sentSms           Boolean              @default(false)
  sentPush          Boolean              @default(false)

  // Statuts d'envoi
  emailSentAt       DateTime?
  smsSentAt         DateTime?
  pushSentAt        DateTime?
  deliveryErrors    Json?

  @@map("notifications")
}

model NotificationPreference {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @db.ObjectId
  notificationType  NotificationType

  // Canaux activés
  inAppEnabled      Boolean          @default(true)
  emailEnabled      Boolean          @default(true)
  smsEnabled        Boolean          @default(false)
  pushEnabled       Boolean          @default(true)

  // Paramètres de fréquence
  instantDelivery   Boolean          @default(false)
  digestFrequency   String?
  quietHoursStart   String?
  quietHoursEnd     String?

  // Métadonnées
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isActive          Boolean          @default(true)

  @@unique([userId, notificationType])
  @@map("notification_preferences")
}

// Nouveau modèle Review pour les évaluations
model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  rating        Float    // Note de 1 à 5
  comment       String?
  
  // Relations
  freelance     User     @relation(fields: [freelanceId], references: [id])
  freelanceId   String   @db.ObjectId
  client        User     @relation("ReviewTarget", fields: [clientId], references: [id])
  clientId      String   @db.ObjectId
  mission       Mission  @relation(fields: [missionId], references: [id])
  missionId     String   @db.ObjectId
  
  // Métadonnées
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isPublic      Boolean  @default(true)
  
  @@unique([freelanceId, clientId, missionId])
  @@map("reviews")
}
